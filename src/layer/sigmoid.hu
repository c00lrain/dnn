#ifndef SIGMOID_HU
#define SIGMOID_HU

__device__ float sigmoid(float x) { return 1.0f / (1.0f + exp(x)); }

// Collaborative threadblock
__device__ void block_sigmoid_forward(float *y, const float *x,
                                      const int size) {
  for (int i = threadIdx.x; i < size; i += blockDim.x) {
    y[i] = sigmoid(x[i]);
  }
}

// dE/dx = dE/dy * dy/dx
__device__ void block_sigmoid_backward(float *dx, const float *dy,
                                       const float *y, const int size) {
  for (int i = threadIdx.x; i < size; i += blockDim.x) {
    dx[i] = dy[i] * y[i] * (1.0f - y[i]);
  }
}

#endif